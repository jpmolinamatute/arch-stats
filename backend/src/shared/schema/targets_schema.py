from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field


class TargetsCreate(BaseModel):
    max_x: float = Field(..., description="Max X coordinate of the target")
    max_y: float = Field(..., description="Max Y coordinate of the target")
    session_id: UUID = Field(..., description="ID of the session this target belongs to")
    distance: int = Field(..., description="Distance to the target in meters")
    model_config = ConfigDict(extra="forbid")


class TargetsUpdate(TargetsCreate):
    pass


class TargetsFilters(BaseModel):
    target_id: UUID | None = Field(default=None, alias="id", description="ID of the target")
    session_id: UUID | None = Field(
        default=None, description="ID of the session this target belongs to"
    )
    max_x: float | None = Field(default=None, description="Max X coordinate of the target")
    max_y: float | None = Field(default=None, description="Max Y coordinate of the target")
    distance: int | None = Field(default=None, description="Distance to the target in meters")
    model_config = ConfigDict(extra="forbid")


class TargetsRead(TargetsCreate):
    target_id: UUID = Field(
        ...,
        alias="id",
        description="A Universally Unique Identifier generated by the system",
    )
    model_config = ConfigDict(extra="forbid")

    def get_id(self) -> UUID:
        return self.target_id
