from datetime import datetime
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field


class SessionsCreate(BaseModel):
    is_opened: bool = Field(..., description="Update open/closed state")
    start_time: datetime = Field(..., description="Session start time (set by the app)")
    location: str = Field(..., max_length=255, description="Location of the session")
    model_config = ConfigDict(extra="forbid")


class SessionsUpdate(BaseModel):
    is_opened: bool | None = Field(default=None, description="Update open/closed state")
    location: str | None = Field(
        default=None, max_length=255, description="Location of the session"
    )
    start_time: datetime | None = Field(default=None, description="Session start time")
    end_time: datetime | None = Field(default=None, description="Session end time")
    model_config = ConfigDict(extra="forbid", populate_by_name=True)


class SessionsFilters(SessionsUpdate):
    pass


class SessionsRead(SessionsCreate):
    session_id: UUID = Field(
        ...,
        alias="id",
        description="A Universally Unique Identifier generated by the system",
    )
    end_time: datetime | None = Field(default=None, description="Filter by session end time")

    def get_id(self) -> UUID:
        return self.session_id
