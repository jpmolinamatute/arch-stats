import json
from typing import Annotated
from uuid import UUID

from annotated_types import Len
from pydantic import BaseModel, ConfigDict, Field


class Face(BaseModel):
    center_x: float = Field(..., description="X coordinate of face center")
    center_y: float = Field(..., description="Y coordinate of face center")
    radius: Annotated[list[float], Len(min_length=1)] = Field(
        default_factory=list, description="List of radii for the face rings"
    )
    points: Annotated[list[int], Len(min_length=1)] = Field(
        default_factory=list, description="Points assigned to the face rings"
    )
    human_identifier: str = Field(..., description="Human-readable identifier for the face")


class TargetsCreate(BaseModel):
    max_x_coordinate: float = Field(..., description="Max X coordinate of the target")
    max_y_coordinate: float = Field(..., description="Max Y coordinate of the target")
    session_id: UUID = Field(..., description="ID of the session this target belongs to")
    faces: list[Face] = Field(..., description="A list of target faces")
    model_config = ConfigDict(extra="forbid")

    def faces_as_json(self) -> str:
        return json.dumps([f.model_dump(mode="json") for f in self.faces])


class TargetsUpdate(TargetsCreate):
    pass


class TargetsFilters(BaseModel):
    session_id: UUID | None = Field(
        default=None, description="ID of the session this target belongs to"
    )
    model_config = ConfigDict(extra="forbid")


class TargetsRead(TargetsCreate):
    target_id: UUID = Field(
        ...,
        alias="id",
        description="A Universally Unique Identifier generated by the system",
    )
    model_config = ConfigDict(extra="forbid")

    def get_id(self) -> UUID:
        return self.target_id
